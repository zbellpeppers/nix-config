#!/usr/bin/env bash

set -e

CURRENT_USER=$(logname || whoami)

# Define valid rebuild commands
valid_commands=("switch" "boot" "test" "build" "dry-activate" "build-vm" "build-vm-with-bootloader" "dry-build" "edit" "build-image")

# Define commands that will skip the git process
skip_git_commands=("test" "build" "dry-activate" "dry-build" "build-vm" "build-vm-with-bootloader" "build-image" "edit")

# Function to display usage
show_usage() {
    echo "Usage: $0 [command] [flags...]"
    echo "Valid commands: ${valid_commands[*]}"
    echo "Examples:"
    echo "  $0 switch"
    echo "  $0 build-image --image-variant iso"
}

# Function to restore backup on failure
restore_backup() {
    echo "Restoring backup from $backup_dir"
    sudo rm -rf /etc/nixos
    sudo cp -r "$backup_dir/nixos" /etc/nixos
    sudo rm -rf "$backup_dir"
}

# Function to capture current system closure
capture_current_system() {
    if [ -L /run/current-system ]; then
        readlink /run/current-system
    else
        echo ""
    fi
}

# Function to generate package update report
generate_update_report() {
    local old_system="$1"
    local new_system="$2"
    local report_file="$3"
    
    if [ -z "$old_system" ] || [ -z "$new_system" ]; then
        echo "No system comparison available" > "$report_file"
        return
    fi
    
    echo "NixOS System Update Report" > "$report_file"
    echo "=========================" >> "$report_file"
    echo "Date: $(date)" >> "$report_file"
    echo "Old system: $old_system" >> "$report_file"
    echo "New system: $new_system" >> "$report_file"
    echo "" >> "$report_file"
    
    # Use nix store diff-closures to compare the systems
    if command -v nix &> /dev/null; then
        echo "Package Changes:" >> "$report_file"
        echo "---------------" >> "$report_file"
        
        # Capture the diff output
        if nix store diff-closures "$old_system" "$new_system" 2>/dev/null >> "$report_file"; then
            # Check if there were actually any changes
            if ! grep -q "â†’" "$report_file"; then
                echo "No package changes detected." >> "$report_file"
            fi
        else
            echo "Unable to generate detailed package diff." >> "$report_file"
            echo "This might be due to missing old system reference." >> "$report_file"
        fi
    else
        echo "Nix command not available for detailed comparison." >> "$report_file"
    fi
    
    echo "" >> "$report_file"
    echo "Report generated by NixOS update script" >> "$report_file"
}

# Parse command-line arguments
if [ $# -eq 0 ]; then
    rebuild_command="switch"
    rebuild_args=()
else
    rebuild_command="$1"
    shift  # Remove the first argument
    rebuild_args=("$@")  # Capture all remaining arguments
fi

# Validate the rebuild command
if [[ ! " ${valid_commands[*]} " =~ " ${rebuild_command} " ]]; then
    echo "Error: Invalid rebuild command: $rebuild_command"
    show_usage
    exit 1
fi

# Check if we should skip git operations
if [[ " ${skip_git_commands[*]} " =~ " ${rebuild_command} " ]]; then
    echo "Command '$rebuild_command' detected. Will skip git operations."
    commit_message=""
    skip_git=true
else
    # Ask user for a commit message at the beginning
    echo "Enter a commit message (or press Enter for default message):"
    read user_message
    
    # Use default message if user didn't provide one
    if [ -z "$user_message" ]; then
        build_id=$(date +"%Y%m%d-%H%M%S")
        commit_message="nixos - build #$build_id"
    else
        commit_message="$user_message"
    fi
    skip_git=false
fi

# Capture current system before rebuild
echo "Capturing current system state..."
old_system_path=$(capture_current_system)

# Create a temporary backup directory
backup_dir=$(mktemp -d)
echo "Creating backup of /etc/nixos in $backup_dir"
sudo cp -r /etc/nixos "$backup_dir"

# Sync files from ~/nix-config to /etc/nixos
echo "Syncing files from ~/nix-config to /etc/nixos"
sudo rsync -a --delete --exclude='.git' ~/nix-config/ /etc/nixos/

# Perform the rebuild
if [ ${#rebuild_args[@]} -eq 0 ]; then
    echo "Starting NixOS rebuild with command: $rebuild_command"
    rebuild_cmd=("sudo" "nixos-rebuild" "$rebuild_command")
else
    echo "Starting NixOS rebuild with command: $rebuild_command ${rebuild_args[*]}"
    rebuild_cmd=("sudo" "nixos-rebuild" "$rebuild_command" "${rebuild_args[@]}")
fi

cd /etc/nixos

# Run the rebuild with all arguments
if "${rebuild_cmd[@]}"; then
    rebuild_success=true
    echo "NixOS rebuild completed successfully."
else
    rebuild_success=false
    echo "NixOS rebuild failed."
fi

# Handle success/failure
if [ "$rebuild_success" = true ]; then
    # Capture new system state after successful rebuild
    new_system_path=$(capture_current_system)
    
    # Generate update report for commands that actually change the system
    if [[ "$rebuild_command" == "switch" || "$rebuild_command" == "boot" ]]; then
        # Create temporary file for the update report
        report_file=$(mktemp --suffix=.txt)
        
        echo "Generating package update report..."
        generate_update_report "$old_system_path" "$new_system_path" "$report_file"
        
        # Display success message with report location
        echo ""
        echo "âœ… NixOS rebuild completed successfully!"
        echo "ðŸ“‹ You can find a list of all packages that were updated this rebuild at '$report_file'"
        echo ""
        
        # Optionally show a preview of changes
        if grep -q "â†’" "$report_file"; then
            echo "ðŸ“¦ Preview of package changes:"
            grep "â†’" "$report_file" | head -10
            if [ $(grep -c "â†’" "$report_file") -gt 10 ]; then
                echo "... and $(( $(grep -c "â†’" "$report_file") - 10 )) more changes (see full report above)"
            fi
            echo ""
        fi
    fi
    
    # Update flake.lock in the git repo if it exists in /etc/nixos
    if [ -f /etc/nixos/flake.lock ]; then
        echo "Updating flake.lock in git repository"
        # Remove the old flake.lock if it exists
        [ -f ~/nix-config/flake.lock ] && sudo rm ~/nix-config/flake.lock
        # Copy the new flake.lock and set proper ownership
        sudo cp /etc/nixos/flake.lock ~/nix-config/
        sudo chown "$CURRENT_USER" ~/nix-config/flake.lock
    fi
    
    # Change ownership of /etc/nixos files to root
    sudo chown -R root:root /etc/nixos
    echo "Changed ownership of /etc/nixos files to root."

    # Clean up the backup
    sudo rm -rf "$backup_dir"
    
    # Handle git operations based on command type
    if [ "$skip_git" = true ]; then
        echo "Command '$rebuild_command' completed. Skipping git operations as planned."
        exit 0
    fi

    # Change to the nix-config directory for git operations
    cd ~/nix-config

    # Perform Git operations
    echo "Performing git operations..."
    git add .
    echo "Using commit message: $commit_message"
    git commit -m "$commit_message"
    git push

    echo "Changes committed and pushed to Git repository."
else
    restore_backup
    exit 1
fi